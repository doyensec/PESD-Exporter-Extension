package pesd;

import burp.IExtensionHelpers;
import java.io.PrintWriter;
import burp.IBurpExtenderCallbacks;
import burp.IHttpRequestResponse;
import java.awt.Desktop;
import java.net.URI;
import java.util.Arrays;

import java.io.File;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;

/**
 *
 * @author francesco
 */
public class PESDPanel extends javax.swing.JPanel {

    private final IBurpExtenderCallbacks callbacks;
    private final IExtensionHelpers helpers;
    public IHttpRequestResponse[] items;
    private int operationMode;
    private PESDExporter pesdexporter;
    private Boolean[] Bools;
    private String[] Templates;
    private String metadata;
    private PrintWriter stdout;
    private PrintWriter stderr;
    private String[] diagrams;

    public PESDPanel(IBurpExtenderCallbacks callbacks, IExtensionHelpers helpers) {
        initComponents();
        this.callbacks = callbacks;
        this.helpers = helpers;
        this.stdout = new PrintWriter(callbacks.getStdout(), true);
        this.stderr = new PrintWriter(callbacks.getStderr(), true);
        IHttpRequestResponse iHttpRequestResponse[] = new IHttpRequestResponse[0];
        this.items = iHttpRequestResponse;
        this.operationMode = 0;
        // Bools index: 0=HasUrlParams, 1=HasBodyParam, 2=HasJsonParam, 3=HasXmlParam, 4=HasMultipartAttr, 5=HasAuthz, 6=Content-type, 7=CookiesSet, 8=HasCORS, 9=HasXFrameOp, 10=HasCSP, 11=HasCookies
        Boolean PramBools[] = new Boolean[]{false, false, false, false, false, false, false, false, false, false, false, false};
        this.Bools = PramBools;
        this.Templates = new String[]{"SAML_SSO", "OAuth2/OIDC", "GQL"};
        // hiding checkboxes
        HasJsonParam_checkbox.setVisible(false);
        HasJsonParam_checkbox.doClick();
        HasAuthz_checkbox.setVisible(false);
        HasAuthz_checkbox.doClick();
        HasBodyParam_checkbox.setVisible(false);
        HasBodyParam_checkbox.doClick();
        HasCORS_checkbox.setVisible(false);
        HasCORS_checkbox.doClick();
        HasCSP_checkbox.setVisible(false);
        HasCSP_checkbox.doClick();
        HasCookies_checkbox.setVisible(false);
        HasCookies_checkbox.doClick();
        HasMultipartAttr_checkbox.setVisible(false);
        HasMultipartAttr_checkbox.doClick();
        HasUrlParams_checkbox.setVisible(false);
        HasUrlParams_checkbox.doClick();
        HasXFrameOp_checkbox.setVisible(false);
        HasXFrameOp_checkbox.doClick();
        HasXMLParam_checkbox.setVisible(false);
        HasXMLParam_checkbox.doClick();
        ContentType_checkbox.setVisible(false);
        ContentType_checkbox.doClick();
        CookiesSet_checkbox.setVisible(false);
        CookiesSet_checkbox.doClick();
        jSeparator1.setVisible(false);
        InRequests_label.setVisible(false);
        InResponses_label.setVisible(false);
        OAuth2_OIDC_TEMPLATE_checkbox.setVisible(false);
        OAuth2_OIDC_TEMPLATE_checkbox.doClick();
        SAML_SSO_TEMPLATE_checkbox.setVisible(false);
        SAML_SSO_TEMPLATE_checkbox.doClick();
        GQL_TEMPLATE_checkbox.setVisible(false);
        GQL_TEMPLATE_checkbox.doClick();
        autoExport_check.doClick();
        //setting automatically by default all booleans to true via Analysis preset
        booleansPresets_ComboBox.setSelectedIndex(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ModeOfOperation = new javax.swing.ButtonGroup();
        PESDExport_button = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        CleanFlow_button = new javax.swing.JButton();
        itemsCount_label = new javax.swing.JLabel();
        ContentType_checkbox = new javax.swing.JCheckBox();
        CookiesSet_checkbox = new javax.swing.JCheckBox();
        HasJsonParam_checkbox = new javax.swing.JCheckBox();
        HasUrlParams_checkbox = new javax.swing.JCheckBox();
        HasBodyParam_checkbox = new javax.swing.JCheckBox();
        HasXMLParam_checkbox = new javax.swing.JCheckBox();
        HasMultipartAttr_checkbox = new javax.swing.JCheckBox();
        InRequests_label = new javax.swing.JLabel();
        InResponses_label = new javax.swing.JLabel();
        HasAuthz_checkbox = new javax.swing.JCheckBox();
        BooleansPresets_label = new javax.swing.JLabel();
        booleansPresets_ComboBox = new javax.swing.JComboBox<>();
        HasCORS_checkbox = new javax.swing.JCheckBox();
        HasXFrameOp_checkbox = new javax.swing.JCheckBox();
        HasCSP_checkbox = new javax.swing.JCheckBox();
        HasCookies_checkbox = new javax.swing.JCheckBox();
        EditBools_Button = new javax.swing.JButton();
        modeOfOperation_ComboBox = new javax.swing.JComboBox<>();
        ModeOfOperation_label = new javax.swing.JLabel();
        template_label = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        autoExport_check = new javax.swing.JCheckBox();
        EditTemplates_Button = new javax.swing.JButton();
        OAuth2_OIDC_TEMPLATE_checkbox = new javax.swing.JCheckBox();
        SAML_SSO_TEMPLATE_checkbox = new javax.swing.JCheckBox();
        GQL_TEMPLATE_checkbox = new javax.swing.JCheckBox();

        PESDExport_button.setText("PESD Export");
        PESDExport_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PESDExport_buttonActionPerformed(evt);
            }
        });

        CleanFlow_button.setText("Clean Flow");
        CleanFlow_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CleanFlow_buttonActionPerformed(evt);
            }
        });

        itemsCount_label.setText("Items count : 0");

        ContentType_checkbox.setText("Content-Type");
        ContentType_checkbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContentType_checkboxActionPerformed(evt);
            }
        });

        CookiesSet_checkbox.setText("CookiesSet");
        CookiesSet_checkbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CookiesSet_checkboxActionPerformed(evt);
            }
        });

        HasJsonParam_checkbox.setText("HasJsonParam");
        HasJsonParam_checkbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HasJsonParam_checkboxActionPerformed(evt);
            }
        });

        HasUrlParams_checkbox.setText("HasUrlParams");
        HasUrlParams_checkbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HasUrlParams_checkboxActionPerformed(evt);
            }
        });

        HasBodyParam_checkbox.setText("HasBodyParam");
        HasBodyParam_checkbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HasBodyParam_checkboxActionPerformed(evt);
            }
        });

        HasXMLParam_checkbox.setText("HasXMLParam");
        HasXMLParam_checkbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HasXMLParam_checkboxActionPerformed(evt);
            }
        });

        HasMultipartAttr_checkbox.setText("HasMultipartAttr");
        HasMultipartAttr_checkbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HasMultipartAttr_checkboxActionPerformed(evt);
            }
        });

        InRequests_label.setText("In Requests :");

        InResponses_label.setText("In Responses :");

        HasAuthz_checkbox.setText("HasAuthz");
        HasAuthz_checkbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HasAuthz_checkboxActionPerformed(evt);
            }
        });

        BooleansPresets_label.setText("Flags Set : ");

        booleansPresets_ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Analysis", "PoC" }));
        booleansPresets_ComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                booleansPresets_ComboBoxActionPerformed(evt);
            }
        });

        HasCORS_checkbox.setText("HasCORS");
        HasCORS_checkbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HasCORS_checkboxActionPerformed(evt);
            }
        });

        HasXFrameOp_checkbox.setText("HasXFrameOp");
        HasXFrameOp_checkbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HasXFrameOp_checkboxActionPerformed(evt);
            }
        });

        HasCSP_checkbox.setText("HasCSP");
        HasCSP_checkbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HasCSP_checkboxActionPerformed(evt);
            }
        });

        HasCookies_checkbox.setText("HasCookies");
        HasCookies_checkbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HasCookies_checkboxActionPerformed(evt);
            }
        });

        EditBools_Button.setText("Edit set");
        EditBools_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditBools_ButtonActionPerformed(evt);
            }
        });

        modeOfOperation_ComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Domains as Actors", "Endpoints as Actors" }));
        modeOfOperation_ComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modeOfOperation_ComboBoxActionPerformed(evt);
            }
        });

        ModeOfOperation_label.setText("Mode of Operation : ");

        template_label.setText("Templates :");

        jLabel2.setText("Proxy Enriched Sequence Diagrams Exporter");

        autoExport_check.setText(" Auto-Export");
        autoExport_check.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoExport_checkActionPerformed(evt);
            }
        });

        EditTemplates_Button.setText("Edit set");
        EditTemplates_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditTemplates_ButtonActionPerformed(evt);
            }
        });

        OAuth2_OIDC_TEMPLATE_checkbox.setText(" OAuth2 / OIDC");
        OAuth2_OIDC_TEMPLATE_checkbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OAuth2_OIDC_TEMPLATE_checkboxActionPerformed(evt);
            }
        });

        SAML_SSO_TEMPLATE_checkbox.setText(" SAML SSO");
        SAML_SSO_TEMPLATE_checkbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SAML_SSO_TEMPLATE_checkboxActionPerformed(evt);
            }
        });

        GQL_TEMPLATE_checkbox.setText("GQL");
        GQL_TEMPLATE_checkbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GQL_TEMPLATE_checkboxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(itemsCount_label)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ModeOfOperation_label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(modeOfOperation_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(template_label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(OAuth2_OIDC_TEMPLATE_checkbox)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(EditTemplates_Button)
                                        .addGap(55, 55, 55)
                                        .addComponent(BooleansPresets_label)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(booleansPresets_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(EditBools_Button))
                                    .addComponent(SAML_SSO_TEMPLATE_checkbox)
                                    .addComponent(GQL_TEMPLATE_checkbox))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(HasUrlParams_checkbox)
                                            .addComponent(HasBodyParam_checkbox)
                                            .addComponent(HasJsonParam_checkbox)
                                            .addComponent(HasCookies_checkbox)
                                            .addComponent(InRequests_label))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(HasXMLParam_checkbox)
                                            .addComponent(HasMultipartAttr_checkbox)
                                            .addComponent(HasAuthz_checkbox)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(InResponses_label)
                                                .addGap(29, 29, 29))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(CookiesSet_checkbox)
                                                    .addComponent(ContentType_checkbox)
                                                    .addComponent(HasCORS_checkbox))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(HasCSP_checkbox)
                                            .addComponent(HasXFrameOp_checkbox)))))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jLabel2)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(PESDExport_button)
                        .addGap(18, 18, 18)
                        .addComponent(CleanFlow_button)
                        .addGap(18, 18, 18)
                        .addComponent(autoExport_check)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(itemsCount_label)
                .addGap(9, 9, 9)
                .addComponent(InRequests_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(HasXMLParam_checkbox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(HasMultipartAttr_checkbox, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(HasAuthz_checkbox, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(77, 77, 77))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(HasCookies_checkbox, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(HasUrlParams_checkbox, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(modeOfOperation_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ModeOfOperation_label))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(template_label)
                                    .addComponent(EditTemplates_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(BooleansPresets_label)
                                    .addComponent(booleansPresets_ComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(EditBools_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(6, 6, 6)
                                .addComponent(OAuth2_OIDC_TEMPLATE_checkbox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(SAML_SSO_TEMPLATE_checkbox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(GQL_TEMPLATE_checkbox))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(HasBodyParam_checkbox)
                                .addGap(6, 6, 6)
                                .addComponent(HasJsonParam_checkbox, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(7, 7, 7)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(InResponses_label, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(ContentType_checkbox)
                                    .addComponent(HasXFrameOp_checkbox))))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HasCSP_checkbox)
                    .addComponent(CookiesSet_checkbox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(HasCORS_checkbox)
                .addGap(92, 92, 92)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(CleanFlow_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(PESDExport_button))
                    .addComponent(autoExport_check))
                .addGap(153, 153, 153))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void PESDExport_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PESDExport_buttonActionPerformed

        this.pesdexporter = new PESDExporter(callbacks, helpers, this.items, stdout, stderr, this.operationMode, this.Bools, this.Templates);
        this.diagrams = pesdexporter.generatePESD();
        this.metadata = pesdexporter.getMetadata();

        try {
            InputStream page = getClass().getResourceAsStream("/export.html");
            String response = new String(page.readAllBytes(), StandardCharsets.UTF_8);
            String[] lines = this.diagrams[0].split("\r\n|\r|\n");
            if (lines.length > 100) {
                response = response.replace("TEMPLATEINSERT1", "%% This file contains a Sequence Diagram defined with MermaidJS Markdown syntax (see https://mermaid-js.github.io/)%%\n"
                        + "%%{init: {'theme': 'base', 'themeVariables': {'actorBorder':'#808486','actorTextColor':'#34343b','primaryColor': '#fa9b35'}}}%%\n"
                        + "sequenceDiagram\n"
                        + "PESD->>User: Hey!\n"
                        + "PESD->>User: If it has more than 50 entries \n"
                        + "PESD->>User: It is not a flow\n"
                        + "PESD->>User: It is traffic history!\n"
                        + "Note right of Browser : Seriously\n"
                        + "PESD->>User: Try again with less than 50 items");
                response = response.replace("TEMPLATEINSERT2", "{}");
                response = response.replace("TEMPLATEINSERT3", "%% This file contains a Sequence Diagram defined with MermaidJS Markdown syntax (see https://mermaid-js.github.io/)%%\n"
                        + "%%{init: {'theme': 'base', 'themeVariables': {'actorBorder':'#808486','actorTextColor':'#34343b','primaryColor': '#fa9b35'}}}%%\n"
                        + "sequenceDiagram\n"
                        + "PESD->>User: Nothing to mask here!\n"
                        + "PESD->>User: Flows longer than 50 items are not supported for your own good\n"
                        + "PESD->>User: Nothing personal\n"
                        + "PESD->>User: That's it \n"
                        + "Note right of Browser : Seriously");
            } else {
                response = response.replace("TEMPLATEINSERT1", this.diagrams[0].replace("`", "&#x60;"));
                response = response.replace("TEMPLATEINSERT2", this.metadata.replace("`", "&#x60;"));
                response = response.replace("TEMPLATEINSERT3", this.diagrams[1].replace("`", "&#x60;"));
            }

            File temp = File.createTempFile("exports", ".html");
            String path = temp.getAbsolutePath();
            try {
                Files.writeString(temp.toPath(), response, StandardCharsets.UTF_8);
                // directing the user to the Browser Export Page File
                Desktop.getDesktop().open(new File(path));
            } catch (Exception e) {
                stdout.println(e);
            }
        } catch (Exception e) {
            stdout.println(e);
        }

        // delete current items sent to the extension and set counter to 0 in the UI
        IHttpRequestResponse iHttpRequestResponse[] = new IHttpRequestResponse[0];
        this.items = iHttpRequestResponse;
        setCountLabel();
    }//GEN-LAST:event_PESDExport_buttonActionPerformed

    private void CleanFlow_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CleanFlow_buttonActionPerformed
        // delete current items sent to the extension and set counter to 0 in the UI

        IHttpRequestResponse iHttpRequestResponse[] = new IHttpRequestResponse[0];
        this.items = iHttpRequestResponse;
        setCountLabel();
    }//GEN-LAST:event_CleanFlow_buttonActionPerformed

    private void HasUrlParams_checkboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HasUrlParams_checkboxActionPerformed
        if (HasUrlParams_checkbox.isSelected()) {
            this.Bools[0] = true;
        } else {
            this.Bools[0] = false;
        }
    }//GEN-LAST:event_HasUrlParams_checkboxActionPerformed

    private void HasBodyParam_checkboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HasBodyParam_checkboxActionPerformed
        if (HasBodyParam_checkbox.isSelected()) {
            this.Bools[1] = true;
        } else {
            this.Bools[1] = false;
        }
    }//GEN-LAST:event_HasBodyParam_checkboxActionPerformed

    private void HasJsonParam_checkboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HasJsonParam_checkboxActionPerformed
        if (HasJsonParam_checkbox.isSelected()) {
            this.Bools[2] = true;
        } else {
            this.Bools[2] = false;
        }
    }//GEN-LAST:event_HasJsonParam_checkboxActionPerformed

    private void HasXMLParam_checkboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HasXMLParam_checkboxActionPerformed
        if (HasXMLParam_checkbox.isSelected()) {
            this.Bools[3] = true;
        } else {
            this.Bools[3] = false;
        }
    }//GEN-LAST:event_HasXMLParam_checkboxActionPerformed

    private void HasMultipartAttr_checkboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HasMultipartAttr_checkboxActionPerformed
        if (HasMultipartAttr_checkbox.isSelected()) {
            this.Bools[4] = true;
        } else {
            this.Bools[4] = false;
        }
    }//GEN-LAST:event_HasMultipartAttr_checkboxActionPerformed

    private void HasAuthz_checkboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HasAuthz_checkboxActionPerformed
        if (HasAuthz_checkbox.isSelected()) {
            this.Bools[5] = true;
        } else {
            this.Bools[5] = false;
        }
    }//GEN-LAST:event_HasAuthz_checkboxActionPerformed

    private void ContentType_checkboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContentType_checkboxActionPerformed
        if (ContentType_checkbox.isSelected()) {
            this.Bools[6] = true;
        } else {
            this.Bools[6] = false;
        }
    }//GEN-LAST:event_ContentType_checkboxActionPerformed

    private void CookiesSet_checkboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CookiesSet_checkboxActionPerformed
        if (CookiesSet_checkbox.isSelected()) {
            this.Bools[7] = true;
        } else {
            this.Bools[7] = false;
        }
    }//GEN-LAST:event_CookiesSet_checkboxActionPerformed


    private void booleansPresets_ComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_booleansPresets_ComboBoxActionPerformed
        // select all checkboxes for Booleans if Analysis mode and de-select all if PoC mode

        if (this.booleansPresets_ComboBox.getSelectedItem().toString() == "Analysis") {
            if (!HasAuthz_checkbox.isSelected()) {
                HasAuthz_checkbox.doClick();
            }
            if (!HasMultipartAttr_checkbox.isSelected()) {
                HasMultipartAttr_checkbox.doClick();
            }
            if (!HasXMLParam_checkbox.isSelected()) {
                HasXMLParam_checkbox.doClick();
            }
            if (!HasBodyParam_checkbox.isSelected()) {
                HasBodyParam_checkbox.doClick();
            }
            if (!HasUrlParams_checkbox.isSelected()) {
                HasUrlParams_checkbox.doClick();
            }
            if (!HasJsonParam_checkbox.isSelected()) {
                HasJsonParam_checkbox.doClick();
            }
            if (!CookiesSet_checkbox.isSelected()) {
                CookiesSet_checkbox.doClick();
            }
            if (!ContentType_checkbox.isSelected()) {
                ContentType_checkbox.doClick();
            }
            if (!HasCORS_checkbox.isSelected()) {
                HasCORS_checkbox.doClick();
            }
            if (!HasXFrameOp_checkbox.isSelected()) {
                HasXFrameOp_checkbox.doClick();
            }
            if (!HasCSP_checkbox.isSelected()) {
                HasCSP_checkbox.doClick();
            }
            if (!HasCookies_checkbox.isSelected()) {
                HasCookies_checkbox.doClick();
            }
        } else {
            if (HasAuthz_checkbox.isSelected()) {
                HasAuthz_checkbox.doClick();
            }
            if (HasMultipartAttr_checkbox.isSelected()) {
                HasMultipartAttr_checkbox.doClick();
            }
            if (HasXMLParam_checkbox.isSelected()) {
                HasXMLParam_checkbox.doClick();
            }
            if (HasBodyParam_checkbox.isSelected()) {
                HasBodyParam_checkbox.doClick();
            }
            if (HasUrlParams_checkbox.isSelected()) {
                HasUrlParams_checkbox.doClick();
            }
            if (HasJsonParam_checkbox.isSelected()) {
                HasJsonParam_checkbox.doClick();
            }
            if (CookiesSet_checkbox.isSelected()) {
                CookiesSet_checkbox.doClick();
            }
            if (ContentType_checkbox.isSelected()) {
                ContentType_checkbox.doClick();
            }
            if (HasCORS_checkbox.isSelected()) {
                HasCORS_checkbox.doClick();
            }
            if (HasXFrameOp_checkbox.isSelected()) {
                HasXFrameOp_checkbox.doClick();
            }
            if (HasCSP_checkbox.isSelected()) {
                HasCSP_checkbox.doClick();
            }
            if (HasCookies_checkbox.isSelected()) {
                HasCookies_checkbox.doClick();
            }
        }
    }//GEN-LAST:event_booleansPresets_ComboBoxActionPerformed

    private void HasCORS_checkboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HasCORS_checkboxActionPerformed
        if (HasCORS_checkbox.isSelected()) {
            this.Bools[8] = true;
        } else {
            this.Bools[8] = false;
        }
    }//GEN-LAST:event_HasCORS_checkboxActionPerformed

    private void HasXFrameOp_checkboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HasXFrameOp_checkboxActionPerformed
        if (HasXFrameOp_checkbox.isSelected()) {
            this.Bools[9] = true;
        } else {
            this.Bools[9] = false;
        }
    }//GEN-LAST:event_HasXFrameOp_checkboxActionPerformed

    private void HasCSP_checkboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HasCSP_checkboxActionPerformed
        if (HasCSP_checkbox.isSelected()) {
            this.Bools[10] = true;
        } else {
            this.Bools[10] = false;
        }
    }//GEN-LAST:event_HasCSP_checkboxActionPerformed

    private void HasCookies_checkboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HasCookies_checkboxActionPerformed
        if (HasCookies_checkbox.isSelected()) {
            this.Bools[11] = true;
        } else {
            this.Bools[11] = false;
        }
    }//GEN-LAST:event_HasCookies_checkboxActionPerformed

    private void EditBools_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditBools_ButtonActionPerformed
        //Hide/Show Booleans checkboxes 

        if (HasJsonParam_checkbox.isVisible()) {
            HasJsonParam_checkbox.setVisible(false);
            HasAuthz_checkbox.setVisible(false);
            HasBodyParam_checkbox.setVisible(false);
            HasCORS_checkbox.setVisible(false);
            HasCSP_checkbox.setVisible(false);
            HasCookies_checkbox.setVisible(false);
            HasMultipartAttr_checkbox.setVisible(false);
            HasUrlParams_checkbox.setVisible(false);
            HasXFrameOp_checkbox.setVisible(false);
            HasXMLParam_checkbox.setVisible(false);
            ContentType_checkbox.setVisible(false);
            CookiesSet_checkbox.setVisible(false);
            jSeparator1.setVisible(false);
            InRequests_label.setVisible(false);
            InResponses_label.setVisible(false);
        } else {
            HasJsonParam_checkbox.setVisible(true);
            HasAuthz_checkbox.setVisible(true);
            HasBodyParam_checkbox.setVisible(true);
            HasCORS_checkbox.setVisible(true);
            HasCSP_checkbox.setVisible(true);
            HasCookies_checkbox.setVisible(true);
            HasMultipartAttr_checkbox.setVisible(true);
            HasUrlParams_checkbox.setVisible(true);
            HasXFrameOp_checkbox.setVisible(true);
            HasXMLParam_checkbox.setVisible(true);
            ContentType_checkbox.setVisible(true);
            CookiesSet_checkbox.setVisible(true);
            jSeparator1.setVisible(true);
            InRequests_label.setVisible(true);
            InResponses_label.setVisible(true);
        }
    }//GEN-LAST:event_EditBools_ButtonActionPerformed

    private void modeOfOperation_ComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modeOfOperation_ComboBoxActionPerformed

        if (this.modeOfOperation_ComboBox.getSelectedItem().toString() == "Domains as Actors") {
            this.operationMode = 0;
        } else {
            this.operationMode = 1;
        }
    }//GEN-LAST:event_modeOfOperation_ComboBoxActionPerformed

    private void autoExport_checkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoExport_checkActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_autoExport_checkActionPerformed

    private void EditTemplates_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditTemplates_ButtonActionPerformed
        //Hide/Show Booleans checkboxes 

        if (SAML_SSO_TEMPLATE_checkbox.isVisible()) {
            SAML_SSO_TEMPLATE_checkbox.setVisible(false);
            OAuth2_OIDC_TEMPLATE_checkbox.setVisible(false);
            GQL_TEMPLATE_checkbox.setVisible(false);
        } else {
            SAML_SSO_TEMPLATE_checkbox.setVisible(true);
            OAuth2_OIDC_TEMPLATE_checkbox.setVisible(true);
            GQL_TEMPLATE_checkbox.setVisible(true);
        }
    }//GEN-LAST:event_EditTemplates_ButtonActionPerformed

    private void SAML_SSO_TEMPLATE_checkboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SAML_SSO_TEMPLATE_checkboxActionPerformed
        if (SAML_SSO_TEMPLATE_checkbox.isSelected()) {
            this.Templates[0] = "SAML_SSO";
        } else {
            this.Templates[0] = "";
        }
    }//GEN-LAST:event_SAML_SSO_TEMPLATE_checkboxActionPerformed

    private void OAuth2_OIDC_TEMPLATE_checkboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OAuth2_OIDC_TEMPLATE_checkboxActionPerformed
        if (OAuth2_OIDC_TEMPLATE_checkbox.isSelected()) {
            this.Templates[1] = "OAuth2/OIDC";
        } else {
            this.Templates[1] = "";
        }
    }//GEN-LAST:event_OAuth2_OIDC_TEMPLATE_checkboxActionPerformed

    private void GQL_TEMPLATE_checkboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GQL_TEMPLATE_checkboxActionPerformed
        // TODO add your handling code here:
        if (GQL_TEMPLATE_checkbox.isSelected()) {
            this.Templates[2] = "GQL";
        } else {
            this.Templates[2] = "";
        }
    }//GEN-LAST:event_GQL_TEMPLATE_checkboxActionPerformed

    public int setItems(IHttpRequestResponse[] newItems, Integer opMode) {
        // called from BurpExtender.java to set selected items and operation mode in the panel
        try {
            int aLen = this.items.length;
            int bLen = newItems.length;

            // merging new selected items with previously selected items  
            IHttpRequestResponse[] c = Arrays.copyOf(this.items, aLen + bLen);
            System.arraycopy(this.items, 0, c, 0, aLen);
            System.arraycopy(newItems, 0, c, aLen, bLen);
            this.items = c;
            //updating Mode Of Operation combobox and op. mode attribute
            this.modeOfOperation_ComboBox.setSelectedIndex(opMode);
        } catch (Exception e) {
            return 0;
        }
        return 1;
    }

    public void setCountLabel() {
        itemsCount_label.setText("Items count : " + this.items.length);
    }

    public Boolean getAutoExport() {
        return this.autoExport_check.isSelected();
    }

    public void clickPESDExport_button() {
        this.PESDExport_button.doClick();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BooleansPresets_label;
    private javax.swing.JButton CleanFlow_button;
    private javax.swing.JCheckBox ContentType_checkbox;
    private javax.swing.JCheckBox CookiesSet_checkbox;
    private javax.swing.JButton EditBools_Button;
    private javax.swing.JButton EditTemplates_Button;
    private javax.swing.JCheckBox GQL_TEMPLATE_checkbox;
    private javax.swing.JCheckBox HasAuthz_checkbox;
    private javax.swing.JCheckBox HasBodyParam_checkbox;
    private javax.swing.JCheckBox HasCORS_checkbox;
    private javax.swing.JCheckBox HasCSP_checkbox;
    private javax.swing.JCheckBox HasCookies_checkbox;
    private javax.swing.JCheckBox HasJsonParam_checkbox;
    private javax.swing.JCheckBox HasMultipartAttr_checkbox;
    private javax.swing.JCheckBox HasUrlParams_checkbox;
    private javax.swing.JCheckBox HasXFrameOp_checkbox;
    private javax.swing.JCheckBox HasXMLParam_checkbox;
    private javax.swing.JLabel InRequests_label;
    private javax.swing.JLabel InResponses_label;
    private javax.swing.ButtonGroup ModeOfOperation;
    private javax.swing.JLabel ModeOfOperation_label;
    private javax.swing.JCheckBox OAuth2_OIDC_TEMPLATE_checkbox;
    private javax.swing.JButton PESDExport_button;
    private javax.swing.JCheckBox SAML_SSO_TEMPLATE_checkbox;
    private javax.swing.JCheckBox autoExport_check;
    private javax.swing.JComboBox<String> booleansPresets_ComboBox;
    private javax.swing.JLabel itemsCount_label;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JComboBox<String> modeOfOperation_ComboBox;
    private javax.swing.JLabel template_label;
    // End of variables declaration//GEN-END:variables
}
